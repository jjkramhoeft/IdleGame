namespace Model
{
    /// <summary> A Traversable location. Construct from point</summary>
    [Serializable]
    public class Location(Point point)
    {
        /// <summary> Set by storage when saved first time </summary>
        public int Id { get; set; }

        /// <summary> </summary>
        public GenerativeState State { get; set; }

        /// <summary> Name of the location </summary>
        public string Name { get; set; } = "";

        /// <summary> A discription of the location </summary>
        public string Description { get; set; } = "";

        /// <summary> A discription of the location generated by a LLM for using in AI photo generation </summary>
        public string DescriptionPromptByLLM { get; set; } = "";

        /// <summary> Full path and name for the locations main picture </summary>
        public string? PicturePath { get; set; }

        /// <summary> Api uri to the locations main picture </summary>
        public Uri? PictureUri { get; set; }

        /// <summary> Point on the map for this loaction </summary>
        public Point Point { get; set; } = point;

        /// <summary> The location box containing this location </summary>
        public Box Box { get; set; } = Box.GetLocationBox(point);

        /// <summary> The region box for the region this location belongs to </summary>
        public Box? AssociateRegionBox { get; set; }

        ///
        public LocationTypes? LocationTypeKey { get; set; }

        /// <summary> Height above sea level in KM </summary>
        public double Height { get; set; }

        /// <summary> Size of this location </summary>
        public double Radius { get; set; }

        /// <summary> Actual population count (Before kills) </summary>
        public int Population { get; set; }

        /// <summary> Calculate population potentian pr race </summary>
        public Dictionary<RaceIds,int> RacialPopulationPotention = [];

        /// <summary> How much this location is sloping. 0~it is buildable, 1~steepest slope in world </summary>
        public double SlopeValue { get; set; } // 0=flat, 1=steepest slope

        /// <summary> A named climate specific for this location </summary>
        public Climate? Climate { get; set; }

        /// <summary> A geology type at this location.</summary>
        public GeologyId GeologyId { get; set; }

        /// <summary> Biom... </summary>
        public BiomIds BiomId { get; set; }

        /// <summary> -1 Ancient, 0 Normal, 1 Modern </summary>
        public int Age { get; set; }

        /// <summary> Has a habor for tavel by  boat </summary>
        public bool HasHabor { get; set; }

        /// <summary> Critters at this location </summary>
        public Dictionary<CritterIds, double> CritterWeights { get; set; } = [];

        /// <summary> Animals at this location </summary>
        public Dictionary<AnimalIds, double> AnimalWeights { get; set; } = [];

        /// <summary> Beast at this location </summary>
        public Dictionary<BeastIds, double> BeastWeights { get; set; } = [];

        /// <summary> Monsters at this location </summary>
        public Dictionary<int, double> MonsterWeights { get; set; } = [];

        /// <summary> Plants at this location </summary>
        public Dictionary<int, double> PlantWeights { get; set; } = [];

        /// <summary> Trees at this location </summary>
        public Dictionary<int, double> TreeWeights { get; set; } = [];
        
        /// <summary> Trees at this location </summary>
        public List<int> ActivePersonRequestIds { get; set; } = [];
    }
}